<!DOCTYPE html>
<html>

<head>
  <% include ./header.ejs %>
</head>

<body>

  <% include ./nav.ejs %>

  <div class="jumbotron text-center">
    <div class="container">
      <a href="/" class="lang-logo">
        <img src="/lang-logo.png">
      </a>
      <h1>Projeto de Engenharia de software</h1>
      <p>Este é um pequeno exemplo de um CRUD simples em node de uma lista de contatos</p>
      <a type="button" class="btn btn-lg btn-default" href="/contatos"><span class="glyphicon glyphicon-flash"></span>
        Contatos (exemplo)</a>
      <a type="button" class="btn btn-lg btn-primary"
        href="https://github.com/engenhariadesoftwareuepg/projetonode"><span
          class="glyphicon glyphicon-download"></span> Código fonte no GitHub</a>
    </div>
  </div>
  <div class="container">
    <div class="alert alert-info text-center" role="alert">
      Para utilizar este exemplo acesse o repositório do código <a
        href="https://github.com/engenhariadesoftwareuepg/projetonode" class="alert-link">Projeto com Node</a>.
    </div>
    <hr>
    <div class="row">
      <div class="col-md-6">
        <h3><span class="glyphicon glyphicon-info-sign"></span> Como este exemplo foi construido</h3>
        <ul>
          <li>Para o guia completo deste projeto acesse o arquivo README.md do repositório do <a
              href="https://github.com/engenhariadesoftwareuepg/projetonode">Projeto</a>.</li>

          <li>Este projeto utiliza o framework web <a href="https://expressjs.com/" target="_blank">Express</a></li>
          <li>Está configurado com o banco de dados Mongo DB com o utilitário <a href="https://mongoosejs.com/"
              target="_blank">Mongoose</a> para modelagem dos objetos</li>
          <li>Para a definição das views e templates é utilizado a engine <a href="https://ejs.co"
              target="_blank">EJS</a></li>
          <li>Também está implmentado alguns testes unitários e de comportamento com as diretivas <i>assert</i> do NODE
            e com o utilitário <a href="https://mochajs.org/" target="_blank">MOCHA</a>. Também está sendo utilizado o
            <a href="https://www.chaijs.com" target="_blank">Chai</a> (BDD/TDD)</li>

        </ul>
      </div>
      <div class="col-md-6">
        <h3><span class="glyphicon glyphicon-link"></span> Arquitetura da aplicação</h3>
        <ul>
          <li>Esta aplicação utiliza uma arquitetura MVC (Model, View e Control)</li>
          <ul>
            <li>
              O <b>Model</b> é responsável pela estrutura de dados da aplicação, e neste caso utiliza o Schema do
              mogoose para modelagem dos dados.
              Os arquivos de Models fica no diretório <code>/models/</code></li>
            <li>O <b>Controller</b> é responsável pela regra de negócio, assim como instanciar os models e gerenciar os
              dados para renderizar as views.
              O model fica no diretório <code>/controllers/</code></li>
            <li>As <b>Views</b> tem a responsabilidade de renderizar e mostrar as informações oriundas do model e é
              controlada pelo controller.
              O diretório de localização das views é <code>/views/</code>
            </li>
          </ul>
          <li>
            Todas as rotas, ou seja as urls que serão utilizadas para acessar cada função no sistema são definidas no
            diretório <code>/routes/</code>
          </li>
          <li>
            O diretório <code>/middleware/</code> é destinado para funções que irão "interceptar" alguma ação, como por
            exemplo os erros são interceptados pelo arquivo <code>/middleware/error.js</code> que é utilizado para renderizar uma página "amigável" caso
            ocorra um erro 500 ou
            página não encontrada (404).
          </li>
          <li>
            Os testes são executados todos arquivos *.js que estão localizados no diretório <code>/tests/</code>
          </li>
        </ul>

      </div>
      <div class="col-md-6">
        <h3><span class="glyphicon glyphicon-link"></span> Dicas para deploy</h3>
        <ul>
          <li>Utilizar o GitHub para estudantes, no qual você pode obter diversos benefícios de softwares, ferramentas e
            plataformas com versões gratuitas, bonus, descontos, etc. Além de permitir utilizar repositórios privados
            gratuitos. Mais informações <a href="https://education.github.com/students" target="_blank">GitHub
              Education</a></li>
          <li>Para automatização dos testes e integração contínua utilizar a plataforma <a href="https://travis-ci.org/"
              target="_blank">Travis CI</a>. Para criar uma conta no serviço da plataforma deve ser utilizado a mesma
            conta do GitHub (o travis-ci e o github são integrados entre si)</li>
          <li>Para realizar o deploy da aplicação poderá utilizar a plataforma <a
              href="https://www.heroku.com/home">Heroku</a>. Possui um plano básico gratuito (observar as limitações do
            plano gratuito) que atende o desenvolvimento de projetos básicos (como é o caso da disciplina).
            Além de também possuir um plano de estudante <a href="https://www.heroku.com/github-students" target="_blank">Heroku for GitHub Students</a>, onde a sua conta de estudante é validade pela conta do github também de estudante. Documentação, tutoriais da plataforma Heroku:
          </li>
          <ul>
              <li><a href="https://devcenter.heroku.com/">Heroku Dev Center</a></li>
              <li><a href="https://devcenter.heroku.com/articles/getting-started-with-nodejs">Iniciando com Node no
                  Heroku</a></li>
              <li><a href="https://devcenter.heroku.com/articles/deploying-nodejs">Fazendo deploy de aplicações node no Heroku</a></li>
          </ul>
          <li>
            Para banco de dados, a mesma plataforma Heroku possui um SaaS do SGBD Postgres <a href="https://devcenter.heroku.com/articles/heroku-postgresql" target="_blank">Heroku Postgres
            </a>
          </li>
          <li>
            Para banco de dados NoSQL, um SaaS também com um plano básico gratuito (ver limitações do plano) é o <a href="https://mlab.com/" target="_blank">mLab</a> com banco de dados MongoDB
          </li>
          
        </ul>
      </div>
    </div> <!-- row -->
    <div class="alert alert-info text-center" role="alert">
      Este é apenas um exemplo simples de estrutura de um projeto para a disciplina de Engenharia de software. Contém os
      processos básicos para a criação de um CRUD (Create, Replace, Update and Delete) de registro de itens.
      Também possui passos básicos de banco de dados, validação de entrada de dados, e testes. Seu uso não é
      obrigatório, ficando os alunos livres para utilizarem as suas estruturas, bem como linguagem (claro atendendo as
      necessidades do projeto e disciplina)
    </div>
  </div>


</body>

</html>